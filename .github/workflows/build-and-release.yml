# .github/workflows/build-and-release.yml

name: Build Android APK and Release

# This workflow will run when a new tag matching 'release/*' is pushed.
on:
  push:
    tags:
      - 'release/*'

jobs:
  build_and_release:
    runs-on: ubuntu-latest # Use a Linux runner for the build process

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch all history for all tags and branches, which is needed for release actions
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x' # Or your preferred LTS Node.js version (e.g., '20.x')
          cache: 'npm' # Cache npm dependencies for faster builds

      - name: Install dependencies
        run: npm install --force # Use --force if you encounter peer dependency issues

      - name: Install EAS CLI
        run: npm install -g eas-cli

      - name: Install JQ
        # jq is a lightweight and flexible command-line JSON processor, needed to parse EAS build output.
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Login to Expo (via environment variable)
        # EAS CLI automatically picks up EXPO_TOKEN from environment variables.
        # We use 'eas whoami' to verify successful authentication.
        run: eas whoami
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }} # Pass the token as an environment variable

      - name: Build Android APK with EAS (Cloud Build)
        id: eas_build # Add an ID to reference this step's outputs
        # --json: Outputs build information in JSON format, which we'll parse to get the build ID.
        # Removed --output as it's only for local builds.
        run: |
          BUILD_COMMAND_OUTPUT=$(eas build --platform android --profile production --non-interactive --json)
          echo "build_output=$BUILD_COMMAND_OUTPUT" >> $GITHUB_OUTPUT
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }} # Ensure EAS build also has access to the token

      - name: Download Built APK
        # This step parses the build ID from the previous step's output and downloads the APK.
        run: |
          BUILD_ID=$(echo '${{ steps.eas_build.outputs.build_output }}' | jq -r '.[0].id')
          if [ -z "$BUILD_ID" ]; then
            echo "Error: Could not extract build ID from EAS build output."
            exit 1
          fi
          echo "Extracted Build ID: $BUILD_ID"
          # Download the APK artifact using the extracted build ID
          eas build:download $BUILD_ID --output app.apk
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: Get tag name
        id: get_tag
        run: echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Create GitHub Release and Upload APK
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/') # Ensure this only runs on tag pushes
        with:
          # Uses the current tag name as the release tag
          tag_name: ${{ steps.get_tag.outputs.TAG_NAME }}
          # Generates a release name based on the tag
          name: Release ${{ steps.get_tag.outputs.TAG_NAME }}
          # A brief description for the release. You can customize this.
          body: |
            ## New Android APK Release
            This release includes the latest Android application bundle.
            - Version: ${{ steps.get_tag.outputs.TAG_NAME }}
            - Built via GitHub Actions.
          draft: false # Set to true if you want to manually publish the release later
          prerelease: false # Set to true if this is a pre-release (e.g., alpha, beta)
          # Path to the APK file generated by EAS
          files: app.apk
        env:
          # GITHUB_TOKEN is automatically provided by GitHub Actions for authentication
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
